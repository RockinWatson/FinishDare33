<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprt_drac_stand_aim_straight</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object Main Character
//----Create Event----
grav = 0.45;
hsp = 0;
vsp = 0;
jumpspeed = 15;
movespeed = 12;
walking_sound = true;
jumps = 0;
jumpsmax = 2;
canshoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canshoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walking_sound = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///----Step Event----//
//Get players Input
global.key_right = keyboard_check(ord('D'));
global.key_left = keyboard_check(ord('A'));
global.key_jump = keyboard_check_pressed(vk_space);
global.key_fire = mouse_check_button_pressed(mb_left);
global.key_alt_fire = mouse_check_button_pressed(mb_right);
global.key_up = keyboard_check(ord('W'));
//global.key_crouch = keyboard_check_pressed(vk_shift);
//global.key_stand = keyboard_check_released(vk_shift);
mouse_direction = point_direction(x,y,mouse_x,mouse_y);
grounded = place_meeting(x,y+1,obj_ground_collision);

//----movement----//
move = -global.key_left + global.key_right; 
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
//----horizontal collision-----//
if (place_meeting(x+hsp,y,obj_ground_collision)){
    while(!place_meeting(x+sign(hsp),y,obj_ground_collision)){
        x += sign(hsp);
    }
    hsp = 0;
    if (audio_is_playing(snd_run)){
        audio_stop_sound(snd_run);
    }
}
x += hsp;
//----vertical collision----//
if (place_meeting(x,y+vsp,obj_ground_collision)){
    while(!place_meeting(x,y+sign(vsp),obj_ground_collision)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//walking sound
if ((move or -move) and walking_sound == true){
    audio_play_sound(snd_run, 1, false);
    walking_sound = false;
    alarm[0] = 15;
}
//stop running_sound if in Air
if (!grounded and audio_is_playing (snd_run)){
    audio_stop_sound(snd_run);    
}

//----Jump-----//
//reset jump
if (place_meeting(x,y+1,obj_ground_collision)) {
    jumps = jumpsmax;
    if (jumps &lt;=1){
        audio_play_sound(snd_land, 10, false);
    }
}
//Jump Mechanics
if (global.key_jump) and (jumps &gt; 0) {
    audio_play_sound(snd_jump, 1, false);
    jumps -=1;
    vsp = -jumpspeed;
}

//Animate
if (move != 0){
    image_xscale = move;
}
if (grounded){ 
    if (move != 0){
        sprite_index = sprt_drac_run_aim_straight;
    }else if (move !=0 and global.key_up){
        sprite_index = sprt_drac_run_aim_up;
    } else {
        sprite_index = sprt_drac_stand_aim_straight;
    }
}else{
    if (vsp &lt; 0) {
        sprite_index = sprt_drac_jump_aim_straight;
    } else if (vsp &lt; 0 and global.key_up){
        sprite_index = sprt_drac_jump_aim_up;
    }
}

/*
if (global.key_crouch) {
    sprite_index = sprt_drac_crouch_aim_straight;
    movespeed =0;
    jumpspeed =0;
} else if(global.key_crouch and global.key_left){
    sprite_index = sprt_drac_crouch_aim_straight;
} else if (global.key_stand){
    sprite_index = sprt_drac_stand_aim_straight
    movespeed = 12;
    jumpspeed = 15;
}
*/

//Shooting
if image_xscale == -1 {
    if (global.key_fire) and (canshoot = true){
        canshoot = false;
        alarm[9] = 10;
        bullet = instance_create(x-90,y-12, obj_bullet);
        audio_play_sound(snd_laser, 1, false);
        bullet.direction = 180;
    }
} else {
    if (global.key_fire) and (canshoot = true){
        canshoot = false;
        alarm[9] = 10;
        bullet = instance_create(x+90,y-12, obj_bullet);
        audio_play_sound(snd_laser, 1, false);
        bullet.direction = 0;
    }
}
//Special Shooting
if image_xscale == -1 {
    if (global.key_alt_fire) and (global.charge &gt; 0){
        bullet = instance_create(x-85,y-12, obj_bullet_charge);
        audio_play_sound(snd_charge_shot, 1, false);
        bullet.direction = 180;
    }
} else {
    if (global.key_alt_fire) and (global.charge &gt; 0){
        bullet = instance_create(x+85,y-12, obj_bullet_charge);
        audio_play_sound(snd_charge_shot, 1, false);
        bullet.direction = 0;
    }
}



//----Parallax Background----//
if (room == rm_lvl_mars){
    //X values
    background_x[1] = view_xview[0]/2;
    background_x[2] = view_xview[0]/2.5;
    background_x[3] = view_xview[0]/3;
    background_x[4] = view_xview[0]/4;
    
    //Y values
    background_y[3] = view_yview[0]/3;
    background_y[4] = view_yview[0]/4;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
